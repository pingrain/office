<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lu.office.service.dao.room.RoomMapper" >
  <resultMap id="BaseResultMap" type="com.lu.office.model.room.Room" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="room_id" property="roomId" jdbcType="INTEGER" />
    <result column="room_name" property="roomName" jdbcType="VARCHAR" />
    <result column="room_area" property="roomArea" jdbcType="DECIMAL" />
    <result column="room_use" property="roomUse" jdbcType="VARCHAR" />
    <result column="rent_time" property="rentTime" jdbcType="TIMESTAMP" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="operator" property="operator" jdbcType="VARCHAR" />
    <result column="remarks" property="remarks" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <association property="user" column="user_id" javaType="com.lu.office.model.car.Parking"
                 select="com.lu.office.service.dao.sys.UserMapper.selectByPrimaryKey"/>
  </resultMap>
  <sql id="Base_Column_List" >
    id, room_id, room_name, room_area, room_use, rent_time, user_id, operator, remarks,
    status
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from room
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from room
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lu.office.model.room.Room" >
    insert into room (id, room_id, room_name,
    room_area, room_use, rent_time,
    user_id, operator, remarks,
    status)
    values (#{id,jdbcType=INTEGER}, #{roomId,jdbcType=INTEGER}, #{roomName,jdbcType=VARCHAR},
    #{roomArea,jdbcType=DECIMAL}, #{roomUse,jdbcType=VARCHAR}, #{rentTime,jdbcType=TIMESTAMP},
    #{userId,jdbcType=INTEGER}, #{operator,jdbcType=VARCHAR}, #{remarks,jdbcType=VARCHAR},
    #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.lu.office.model.room.Room" >
    insert into room
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="roomId != null" >
        room_id,
      </if>
      <if test="roomName != null" >
        room_name,
      </if>
      <if test="roomArea != null" >
        room_area,
      </if>
      <if test="roomUse != null" >
        room_use,
      </if>
      <if test="rentTime != null" >
        rent_time,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="operator != null" >
        operator,
      </if>
      <if test="remarks != null" >
        remarks,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="roomId != null" >
        #{roomId,jdbcType=INTEGER},
      </if>
      <if test="roomName != null" >
        #{roomName,jdbcType=VARCHAR},
      </if>
      <if test="roomArea != null" >
        #{roomArea,jdbcType=DECIMAL},
      </if>
      <if test="roomUse != null" >
        #{roomUse,jdbcType=VARCHAR},
      </if>
      <if test="rentTime != null" >
        #{rentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="operator != null" >
        #{operator,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null" >
        #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lu.office.model.room.Room" >
    update room
    <set >
      <if test="roomId != null" >
        room_id = #{roomId,jdbcType=INTEGER},
      </if>
      <if test="roomName != null" >
        room_name = #{roomName,jdbcType=VARCHAR},
      </if>
      <if test="roomArea != null" >
        room_area = #{roomArea,jdbcType=DECIMAL},
      </if>
      <if test="roomUse != null" >
        room_use = #{roomUse,jdbcType=VARCHAR},
      </if>
      <if test="rentTime != null" >
        rent_time = #{rentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="operator != null" >
        operator = #{operator,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null" >
        remarks = #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lu.office.model.room.Room" >
    update room
    set room_id = #{roomId,jdbcType=INTEGER},
      room_name = #{roomName,jdbcType=VARCHAR},
      room_area = #{roomArea,jdbcType=DECIMAL},
      room_use = #{roomUse,jdbcType=VARCHAR},
      rent_time = #{rentTime,jdbcType=TIMESTAMP},
      user_id = #{userId,jdbcType=INTEGER},
      operator = #{operator,jdbcType=VARCHAR},
      remarks = #{remarks,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getCountBycont" resultType="java.lang.Integer" parameterType="java.lang.String" >
    select
    count(*)
    from room
    where 1=1 ${cont}
  </select>

  <select id="getPageListByCont" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from room
    where 1=1 ${cont}
    ORDER By rent_time DESC
    limit #{offSet},#{pageSize}
  </select>

  <select id="getOneByCont" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from room
    where 1=1 ${cont}
    limit 1
  </select>

  <select id="getCountBycontWithName" resultType="java.lang.Integer" parameterType="java.lang.String" >
    select
    count(*)
    from room r LEFT JOIN  users u ON (r.user_id = u .user_id)
    where 1=1 ${cont}
  </select>

  <select id="getPageListByContWithName" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    r.id as id, room_id, room_name, room_area, room_use, rent_time, r.user_id as user_id, operator, remarks,
    status
    from room r LEFT JOIN  users u ON (r.user_id = u .user_id)
    where 1=1 ${cont}
    ORDER By rent_time DESC
    limit #{offSet},#{pageSize}
  </select>
</mapper>