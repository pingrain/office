<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lu.office.service.dao.car.ParkingMapper">
  <resultMap id="BaseResultMap" type="com.lu.office.model.car.Parking">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="parking_id" jdbcType="INTEGER" property="parkingId" />
    <result column="adress" jdbcType="VARCHAR" property="adress" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="prince" jdbcType="INTEGER" property="prince" />
    <result column="prince_type" jdbcType="INTEGER" property="princeType" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="rent_time" jdbcType="TIMESTAMP" property="rentTime" />
    <result column="oprator" jdbcType="VARCHAR" property="oprator" />
    <association property="user" column="user_id" javaType="com.lu.office.model.car.Parking"
                 select="com.lu.office.service.dao.sys.UserMapper.selectByPrimaryKey"/>
  </resultMap>
  <sql id="Base_Column_List">
    id, parking_id, adress, type, prince, prince_type, status, user_id, rent_time, oprator
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from parking
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from parking
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lu.office.model.car.Parking">
    insert into parking (id, parking_id, adress, 
      type, prince, prince_type, 
      status, user_id, rent_time, 
      oprator)
    values (#{id,jdbcType=INTEGER}, #{parkingId,jdbcType=INTEGER}, #{adress,jdbcType=VARCHAR}, 
      #{type,jdbcType=INTEGER}, #{prince,jdbcType=INTEGER}, #{princeType,jdbcType=INTEGER}, 
      #{status,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{rentTime,jdbcType=TIMESTAMP}, 
      #{oprator,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.lu.office.model.car.Parking">
    insert into parking
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="parkingId != null">
        parking_id,
      </if>
      <if test="adress != null">
        adress,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="prince != null">
        prince,
      </if>
      <if test="princeType != null">
        prince_type,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="rentTime != null">
        rent_time,
      </if>
      <if test="oprator != null">
        oprator,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="parkingId != null">
        #{parkingId,jdbcType=INTEGER},
      </if>
      <if test="adress != null">
        #{adress,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="prince != null">
        #{prince,jdbcType=INTEGER},
      </if>
      <if test="princeType != null">
        #{princeType,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="rentTime != null">
        #{rentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="oprator != null">
        #{oprator,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lu.office.model.car.Parking">
    update parking
    <set>
      <if test="parkingId != null">
        parking_id = #{parkingId,jdbcType=INTEGER},
      </if>
      <if test="adress != null">
        adress = #{adress,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="prince != null">
        prince = #{prince,jdbcType=INTEGER},
      </if>
      <if test="princeType != null">
        prince_type = #{princeType,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="rentTime != null">
        rent_time = #{rentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="oprator != null">
        oprator = #{oprator,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lu.office.model.car.Parking">
    update parking
    set parking_id = #{parkingId,jdbcType=INTEGER},
      adress = #{adress,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      prince = #{prince,jdbcType=INTEGER},
      prince_type = #{princeType,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      rent_time = #{rentTime,jdbcType=TIMESTAMP},
      oprator = #{oprator,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getCountBycont" parameterType="java.lang.String" resultType="java.lang.Integer">
    select
    count(*)
    from parking
    where 1 = 1 ${cont}
  </select>

  <select id="getPageListByCont" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from parking
    where 1 = 1 ${cont}
    limit #{offSet},#{pageSize}
  </select>

  <select id="getOneByCont" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from parking
    where 1 = 1 ${cont}
    limit 1
  </select>

  <select id="getPageListByContWithName" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    id, parking_id, adress, type, prince, prince_type, status, p.user_id as user_id, rent_time, oprator
    from parking p LEFT JOIN users u ON (p.user_id = u.user_id)
    where 1 = 1 ${cont}
    limit #{offSet},#{pageSize}
  </select>

  <select id="getCountBycontWithName" parameterType="java.lang.String" resultType="java.lang.Integer">
    select
    count(*)
    from parking p LEFT JOIN users u ON (p.user_id = u.user_id)
    where 1 = 1 ${cont}
  </select>
</mapper>